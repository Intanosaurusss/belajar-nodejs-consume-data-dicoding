Latihan: Mengonsumsi dan Menggabungkan Data di Node.js
Pada latihan ini, kita akan membuat 2 layanan REST API yang berbeda, kemudian menggabungkannya di satu layanan REST API. Layanan REST API yang akan kita buat adalah fitur order dan user terpisah di dua layanan dan menggabungkannya di satu layanan yang menampilkan data order dan user.

Ikuti langkah-langkah berikut, ya!
1. Silakan buat folder baru di dalam C -> javascript-projects (Windows) atau home -> javascript-project (Linux dan Mac) dengan nama “nodejs-consume-data”. 
2. Setelah itu, buka folder tersebut menggunakan VSCode.
3. Buka Terminal dan tuliskan perintah:
npm init --y
4. Setelah membuat proyek Node.js, pastikan di dalam proyek nodejs-consume-data terdapat berkas package.json.
5. Kemudian buka berkas tersebut dan sesuaikan nilai di dalam scripts menjadi seperti ini :
"scripts": {
    "start":"SET PORT=3000 node server.js"
},
6. Selanjutnya, kita akan memasang dependencyyang dibutuhkan, yaitu Hapi dan Got.
npm install @hapi/hapi got@11.8.6
7. Setelah pemasangan dependency berhasil, buatlah berkas JavaScript baru dengan nama server.js.
8. Di dalam server.js, tuliskan kode JavaScript berikut :
const Hapi = require('@hapi/hapi');
const got = require('got');
 
const init = async () => {
  const server = Hapi.server({
    port: 3000,
    host: 'localhost',
  });
  await server.start();
  console.log(`Server berjalan pada ${server.info.uri}`);
};
init();
9. Selanjutnya, tambahkan dua berkas baru yaitu order-service.js dan user-service.js.
10. Kemudian, buka berkas order-service.js dan tuliskan kode sebagai berikut.
const http = require('http');
const url = require('url');
Kita menggunakan dependency http dan url untuk membuat http server.
11. Selanjutnya, tambahkan array yang berisi menu sebagai berikut.
const menus = ['Nasi goreng', 'Mie goreng', 'Mie rebus', 'Es teh', 'Teh tawar'];
const MISSING = 3;
Array menus terdiri dari 5 item yang indeks ketiganya ditandai dengan item yang hilang yaitu Es teh.
12. Selanjutnya, buatlah HTTP server dengan kode di bawah ini
const server = http.createServer((req, res) => {
const { pathname } = url.parse(req.url);
  let id = pathname.match(/^\/(\d+)$/);
 
  if (!id) {
   res.statusCode = 400;
   return void res.end();
  }
 
  id = Number(id[1]);
 
  if (id === MISSING) {
   res.statusCode = 404;
   return void res.end();
  }
 
  res.setHeader('Content-Type', 'application/json');
 
  res.end(JSON.stringify({
    id,
    menu: menus[id % menus.length],
  }));
});
Kita bisa memanfaatkan core module http milik Node.js untuk membuat HTTP server menggunakan function http.createServer(). Di dalam function tersebut, kita juga mengatur response status code 400 jika pathnya tidak berupa id, dan response status code 404 jika id tidak ditemukan. 
13. Selanjutnya, tambahkan kode untuk memulai HTTP server
server.listen(process.env.PORT || 0, () => {
  const { port } = server.address();
  console.log(`Order service listening on localhost on port:   ${port}`);
});
HTTP server akan dijalankan pada port spesifik yang didapatkan dari environment variable.

Kode yang ada di berkas order-service.js telah selesai, berikut keseluruhan kode dari berkas order-service.js.
/* eslint-disable */
const http = require('http');
const url = require('url');
 
const menus = ['Nasi goreng', 'Mie goreng', 'Mie rebus', 'Es teh', 'Teh tawar'];
const MISSING = 3;
 
const server = http.createServer((req, res) => {
  const { pathname } = url.parse(req.url);
  let id = pathname.match(/^\/(\d+)$/);
 
  if (!id) {
   res.statusCode = 400;
   return void res.end();
  }
 
  id = Number(id[1]);
 
  if (id === MISSING) {
   res.statusCode = 404;
   return void res.end();
  }
 
  res.setHeader('Content-Type', 'application/json');
 
  res.end(JSON.stringify({
   id,
   menu: menus[id % menus.length],
  }));
});
 
server.listen(process.env.PORT || 0, () => {
  const { port } = server.address();
  console.log(`Order service listening on localhost on port: ${port}`);
});
14. Kemudian kita beralih ke berkas user-service.js, sebenarnya kode yang akan ditulis di berkas ini tidak berbeda jauh dengan berkas order-service.js.
const http = require('http');
const url = require('url');
 
const users = ['Aras', 'Arsy', 'Dimas', 'Ivan', 'Rafy', 'Gilang'];
const MISSING = 4;
 
const server = http.createServer((req, res) => {
  const { pathname } = url.parse(req.url);
  let id = pathname.match(/^\/(\d+)$/);
  if (!id) {
   res.statusCode = 400;
   return void res.end();
  }
 
  id = Number(id[1]);
 
  if (id === MISSING) {
   res.statusCode = 404;
   return void res.end();
  }
 
  res.setHeader('Content-Type', 'application/json');
 
  res.end(JSON.stringify({
   id,
   name: users[id % users.length],
  }));
});
 
server.listen(process.env.PORT || 0, () => {
  const { port } = server.address();
  console.log(`User service listening on localhost on port: ${port}`);
});
Perbedaannya terdapat pada bagian array users yang array users-nya berisi nama user dan variabel missing bernilai 4.
15. Selanjutnya, buka kembali berkas server.js dan tambahkan kode berikut ini sebelum const init:
const {
ORDER_SERVICE_PORT = 4000,
USER_SERVICE_PORT = 5000,
} = process.env;
 
const orderService = `http://localhost:${ORDER_SERVICE_PORT}`;
const userService = `http://localhost:${USER_SERVICE_PORT}`;
Layanan order dan user akan kita mapping portnya menjadi port 4000 dan 5000.
16. Setelah itu, tambahkan satu route baru di dalam function init sebagai berikut
server.route([
  {
    method: 'GET',
    path: '/{id}',
    handler: async (request, h) => {
      const { id } = request.params;
 
      try {
        const [order, user] = await Promise.all([
          got(`${orderService}/${id}`).json(),
          got(`${userService}/${id}`).json(),
      ]);
 
      return {
        id: order.id,
        menu: order.menu,
        user: user.name,
      };
   } catch (error) {
     if (!error.response) throw error;
     if (error.response.statusCode === 400) {
       return h.response({ message: 'bad request' }).code(400);
     }
     if (error.response.statusCode === 404) {
       return h.response({ message: 'not found' }).code(404);
     }
 
     throw error;
    }
   },
  },
]);
Kita menambahkan satu route dengan metode GET dengan path /{id}, dan mengambil data berdasarkan id order melalui request params.
Data yang dikembalikan di route ini yaitu id, menu, dan user yang merupakan hasil gabungan data dari layanan order dan user.

Berikut kesuluruhan kode yang ada di server.js:
const Hapi = require('@hapi/hapi');
const got = require('got');
 
const {
  ORDER_SERVICE_PORT = 4000,
  USER_SERVICE_PORT = 5000,
} = process.env;
 
const orderService = `http://localhost:${ORDER_SERVICE_PORT}`;
const userService = `http://localhost:${USER_SERVICE_PORT}`;
 
const init = async () => {
  const server = Hapi.server({
    port: 3000,
    host: 'localhost',
  });
 
  server.route([
    {
      method: 'GET',
      path: '/{id}',
      handler: async (request, h) => {
        const { id } = request.params;
 
        try {
          const [order, user] = await Promise.all([
            got(`${orderService}/${id}`).json(),
            got(`${userService}/${id}`).json(),
          ]);
 
          return {
            id: order.id,
            menu: order.menu,
            user: user.name,
          };
        } catch (error) {
          if (!error.response) throw error;
          if (error.response.statusCode === 400) {
            return h.response({ message: 'bad request' }).code(400);
          }
          if (error.response.statusCode === 404) {
            return h.response({ message: 'not found' }).code(404);
          }
 
          throw error;
        }
      },
    },
  ]);
 
  await server.start();
  console.log(`Server berjalan pada ${server.info.uri}`);
};
 
init();
17. Simpan berkas server.js, kemudian tambahkan script berikut di package.json
"start:order": "SET PORT=4000 node order-service.js",
"start:user": "SET PORT=5000 node user-service.js"
18. Selanjutnya, jalankan perintah berikut di terminal yang berbeda
npm run start
npm run start:order
npm run start:user

fyi : jika server tidak berjalan coba ubah script di dalam file package.json menjadi :
"scripts": {
    "start": "SET PORT=3000 && node server.js",
    "start:order": "SET PORT=4000 && node order-service.js",
    "start:user": "SET PORT=5000 && node user-service.js"
  },
19. Kemudian akses url http://localhost:3000/1. Jika berhasil, hasilnya akan tampil seperti berikut ini.
{"id":1,"menu":"Mie goreng","user":"Arsy"}
Yey, selamat! Anda telah berhasil mengonsumsi dan menggabungkan data yang berasal dari dua layanan berbeda, yaitu order dan user.
Source code materi, bisa Anda unduh di link berikut Source code latihan consume data (https://github.com/dicodingacademy/hapi-consume-data).

Modul selanjutnya akan membahas tentang deploy web services dan tentunya lebih menantang. Sudah siap dengan modul berikutnya? Yuk, kita lanjut!

Rangkuman Membangun Web Service Menggunakan Node.js
Anda berada di akhir dari modul Membangun Web Service Menggunakan Node.js. Mari kita uraikan materi yang sudah Anda pelajari untuk mempertajam pemahaman.



Membuat HTTP Server secara Native
Pengembangan back-end adalah hal prioritas untuk Node.js. Ia andal dalam membangun aplikasi back-end, salah satunya web server alias sebuah komputer yang dapat menangani dan menanggapi permintaan dari client. Node.js menyediakan core modules http untuk membangun web server.

HTTP module memiliki banyak member seperti objek, properti, atau method yang berguna untuk melakukan hal-hal terkait protokol HTTP. Salah satu member yang penting untuk kita ketahui sekarang adalah method http.createServer().

Sesuai namanya, method ini berfungsi untuk membuat HTTP server yang merupakan instance dari http.server. Method ini menerima satu parameter custom callback yang digunakan sebagai request listener. Di dalam request listener inilah logika untuk menangani dan menanggapi sebuah request dituliskan.

Request listener memiliki 2 parameter, yakni request dan response. Request merupakan objek yang menyimpan informasi terkait permintaan yang dikirimkan oleh client. Di dalam objek ini kita bisa melihat alamat yang diminta, data yang dikirim, ataupun HTTP metode yang digunakan oleh client.

Sementara itu, response merupakan objek yang digunakan untuk menanggapi permintaan. Melalui objek ini kita bisa menentukan data yang diberikan, format dokumen yang digunakan, kode status, atau informasi response lainnya.

Setiap instance dari http.server juga memiliki method listen(). Method inilah yang membuat http.server selalu standby untuk menangani permintaan yang masuk dari client. Setiap kali ada permintaan yang masuk, request listener akan tereksekusi.

Method listen() dapat menerima 4 parameter, berikut detailnya:

port (number): jalur yang digunakan untuk mengakses HTTP server.
hostname (string): nama domain yang digunakan oleh HTTP server.
backlog (number): maksimal koneksi yang dapat ditunda (pending) pada HTTP server.
listeningListener (function): callback yang akan terpanggil ketika HTTP server sedang bekerja (listening).

Namun, keempat parameter di atas bersifat opsional. Kita bisa memberikan nilai port saja atau kombinasi apa pun dari keempatnya. Hal itu tergantung terhadap kebutuhan Anda. Lazimnya, ketika memanggil method listen(), kita memberikan nilai port, hostname, dan listeningListener. 



Web Framework
Web Framework adalah sebuah kerangka yang dapat membantu mempermudah pengembangan web, termasuk dalam membuat web server. Dengan menggunakan framework, penulisan kode akan lebih terstruktur, mudah dipelihara, dan gampang dikembangkan.  

Web Framework menyediakan sekumpulan tools dan library yang dapat menyederhanakan hal-hal yang sering dilakukan dalam pengembangan web, seperti pembuatan server, routing, menangani permintaan, interaksi dengan database, otorisasi, hingga meningkatkan ketahanan web dari serangan luar.



Web Framework di Node.js
Di kelas ini kita menggunakan Hapi framework. Framework seperti Hapi menyediakan environment yang lengkap untuk mengembangkan web server yang kompleks. Bila menggunakan Hapi, kita tak perlu tools lain untuk menerapkan layer authentication, tokenize, cors, dan lain sebagainya. 

Kelemahan Hapi adalah abstraksinya yang terlalu jauh dari Node.js native. Kita perlu belajar secara dalam untuk menguasai framework ini.

Penggunaan framework menjadi pilihan personal. Salah satu faktornya adalah kasus yang hendak Anda hadapi. Bila Anda ingin membangun web server yang kompleks tanpa membutuhkan effort yang besar, Hapi adalah pilihan yang tepat.

Kita akan membangun web server dengan arsitektur REST yang kompleks ke depannya. Agar Anda selalu “Hapi” ketika mengikuti alur belajar, kita akan gunakan framework Hapi dalam membangun web server.

Ketahuilah bahwa Hapi memiliki environment yang cukup luas. Kelas ini tidak akan mengajarkan secara dalam tentang API yang ada di Hapi, melainkan hanya fitur-fitur yang menjadi dasar pembuatan REST API. Jadi, bila Anda ingin mendalami terkait framework Hapi, sempatkan waktu untuk eksplorasi di dokumentasi Hapi yang disediakan ya. 



Membuat HTTP Server Menggunakan Hapi
Untuk membuat HTTP server menggunakan Hapi, kita tidak lagi menggunakan core module http secara langsung. Kita akan membuat server melalui modul pihak ketiga @hapi/hapi. Untuk menggunakan modul tersebut, kita perlu memasang terlebih dahulu melalui NPM.

HTTP server sendiri dibuat melalui method Hapi.server(). Method ini menerima satu parameter, yakni ServerOptions. ServerOptions merupakan objek yang menampung konfigurasi dari server yang hendak dibuat, salah satunya kita bisa menetapkan properti port dan host.

Proses menjalankan server (server.start()) dilakukan secara asynchronous. Karena itu, kita perlu menjalankannya di dalam fungsi async dan memanggil server.start() menggunakan await.

Setelah server berhasil berjalan, Anda bisa melihat alamat lengkap dan port di mana server dijalankan melalui properti server.info.uri.



ESLint
ESLint adalah tools yang dapat membantu atau membimbing Anda untuk selalu menuliskan kode JavaScript dengan gaya yang konsisten. Seperti yang Anda tahu, JavaScript tidak memiliki aturan yang baku untuk gaya penulisan kode, bahkan penggunaan semicolon. Karena itu, terkadang kita jadi tidak konsisten dalam menuliskannya.

ESLint dapat mengevaluasi kode yang dituliskan berdasarkan aturan yang Anda terapkan. Anda bisa menuliskan aturannya secara mandiri atau menggunakan gaya penulisan yang sudah ada seperti AirBnb JavaScript Code Style, Google JavaScript Code Style, dan StandardJS Code Style. Kami sarankan Anda untuk mengikuti salah satu code style yang ada. Mengapa begitu? Jawabannya karena code style tersebut sudah banyak digunakan oleh JavaScript Developer di luar sana.



Same-Origin Policy
Server dapat menampung sebuah website, aplikasi, gambar, video, dan masih banyak lagi. Ketika server menampung website, mungkin beberapa data gambar, video, stylesheet biasanya diambil dari alamat server lain atau origin yang berbeda. Contohnya, stylesheet yang diambil dari Bootstrap CDN ataupun gambar yang diperoleh dari server Unsplash. Hal ini wajar dan biasa dilakukan.

Namun, apakah Anda tahu bahwa tidak semua data bisa diambil dari origin yang berbeda? Contohnya, data JSON yang didapatkan melalui teknik XMLHTTPRequest atau fetch. Jika website meminta sesuatu menggunakan teknik tersebut dari luar origin-nya, permintaan tersebut akan ditolak. Itu disebabkan oleh kebijakan same-origin. Kasus ini terjadi pada aplikasi client dan web server yang kita buat.

Origin terdiri dari tiga hal: protokol, host, dan port number.

Selama aplikasi client mengakses data dari origin yang sama, hal itu dapat dilakukan. Namun, bila ada salah satu saja yang berbeda (misal port 8001), permintaan itu akan ditolak.

Lantas, apa solusi agar keduanya dapat berinteraksi? Tenang, untungnya ada mekanisme yang dapat membuat mereka saling berinteraksi. Mekanisme tersebut disebut Cross-Origin Resource Sharing (CORS).



Mengonsumsi dan Menggabungkan Data di Node.js
Tahukah Anda? Banyak aplikasi yang kita gunakan di belakang layar sebenarnya tidak hanya berasal dari satu layanan, melainkan berasal dari berbagai layanan yang saling berkomunikasi. Aplikasi yang kita gunakan di belakang layar mengonsumsi data yang berasal dari berbagai sumber, kemudian datanya digabungkan sesuai dengan kebutuhan.

Bagaimana cara satu layanan menemukan dan berkomunikasi dengan layanan lainnya? 

Supaya layanan bisa saling berkomunikasi, kita harus menemukan IP address, DNS, atau Port yang ada di server terlebih dahulu. Setelah itu, barulah ia dapat berkomunikasi antar layanan menggunakan protokol HTTP, RPC, dan AMQP.

Node.js memiliki kemampuan untuk mengonsumsi dan menggabungkan data dengan melakukan permintaan HTTP. Anda bisa mengonsumsi data dari suatu layanan REST API dan kemudian menggabungkan data tersebut sebelum dikembalikan sebagai response. 



Dengan ringkasan tersebut, diharapkan Anda dapat memahami semua materi yang telah disampaikan. Jika belum, Anda bisa ulas kembali materi yang diberikan pada modul ini. Untuk Anda yang sudah merasa mantap, yuk lanjut ke modul berikutnya!



Video Web Service menggunakan Node.js
Untuk memperdalam dan mempermudah pemahaman pada materi ini, Anda dapat menyimak video pembahasan berikut (https://youtu.be/K5Un8IZJzWk)

